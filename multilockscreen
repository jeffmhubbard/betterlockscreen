#!/usr/bin/env bash

# Author : Pavan Jadhaw
# Github Profile : https://github.com/pavanjadhaw
# Project Repository : https://github.com/pavanjadhaw/betterlockscreen

init_config () {

	# default configuration options
	insidecolor=00000000
	ringcolor=ffffffff
	keyhlcolor=d23c3dff
	bshlcolor=d23c3dff
	separatorcolor=00000000
	insidevercolor=00000000
	insidewrongcolor=d23c3dff
	ringvercolor=ffffffff
	ringwrongcolor=ffffffff
	verifcolor=ffffffff
	timecolor=ffffffff
	datecolor=ffffffff
	loginbox=00000066
	loginshadow=00000000
	locktext='Type password to unlock...'
	font="sans-serif"
	blur_level=1
	display_on=0
	span_image=false
	lock_timeout=5
	fx_list=(dim blur dimblur pixel)

	# user configuration file
	USER_CONF="$HOME/.config/multilockscreenrc"
	if [ -e "$USER_CONF" ]; then
		# shellcheck source=/dev/null
		source "$USER_CONF"
	fi

	CACHE_DIR="$HOME/.cache/i3lock"
	CUR_DIR="$CACHE_DIR/current"

	# wallpaper
	CUR_W_RESIZE="$CUR_DIR/wall_resize.png"
	CUR_W_DIM="$CUR_DIR/wall_dim.png"
	CUR_W_BLUR="$CUR_DIR/wall_blur.png"
	CUR_W_DIMBLUR="$CUR_DIR/wall_dimblur.png"
	CUR_W_PIXEL="$CUR_DIR/wall_pixel.png"

	# locker
	CUR_L_RESIZE="$CUR_DIR/lock_resize.png"
	CUR_L_DIM="$CUR_DIR/lock_dim.png"
	CUR_L_BLUR="$CUR_DIR/lock_blur.png"
	CUR_L_DIMBLUR="$CUR_DIR/lock_dimblur.png"
	CUR_L_PIXEL="$CUR_DIR/lock_pixel.png"

	# Original DPMS timeout
	DEFAULT_TIMEOUT=`cut -d ' ' -f4 <<< $(xset q | sed -n '25p')`
}
init_config



prelock() {
	if [ -n "$lock_timeout" ]; then
		xset dpms "$lock_timeout"
	fi
	if [ -n "$(pidof dunst)" ]; then
		pkill -u "$USER" -USR1 dunst
	fi
}


lock() {
	#$1 image path

	i3lock \
		-i "$1" \
		--screen "$display_on" \
		--timepos='ix-170:iy-0' \
		--datepos='ix-240:iy+25' \
		--clock --date-align 1 --datestr "$locktext" \
		--insidecolor=$insidecolor --ringcolor=$ringcolor --line-uses-inside \
		--keyhlcolor=$keyhlcolor --bshlcolor=$bshlcolor --separatorcolor=$separatorcolor \
		--insidevercolor=$insidevercolor --insidewrongcolor=$insidewrongcolor \
		--ringvercolor=$ringvercolor --ringwrongcolor=$ringwrongcolor --indpos='x+280:y+h-70' \
		--radius=20 --ring-width=4 --veriftext='' --wrongtext='' \
		--verifcolor="$verifcolor" --timecolor="$timecolor" --datecolor="$datecolor" \
		--time-font="$font" --date-font="$font" --layout-font="$font" --verif-font="$font" --wrong-font="$font" \
		--noinputtext='' --force-clock "$lockargs"
}


postlock() {
	if [ -n "$lock_timeout" ]; then
		xset dpms "$DEFAULT_TIMEOUT"
	fi
	if [ -n "$(pidof dunst)" ] ; then
		pkill -u "$USER" -USR2 dunst
	fi
}


lockselect() {
	prelock
	case "$1" in
		dim)
			# lockscreen with dimmed background
			[[ -f "$CUR_L_DIM" ]] && lock "$CUR_L_DIM"
			;;

		blur)
			# set lockscreen with blurred background
			[[ -f "$CUR_L_BLUR" ]] && lock "$CUR_L_BLUR"
			;;

		dimblur)
			# set lockscreen with dimmed + blurred background
			[[ -f "$CUR_L_DIMBLUR" ]] && lock "$CUR_L_DIMBLUR"
			;;

		pixel)
			# set lockscreen with pixelated background
			[[ -f "$CUR_L_PIXEL" ]] && lock "$CUR_L_PIXEL"
			;;

		*)
			# default lockscreen
			[[ -f "$CUR_L_RESIZE" ]] && lock "$CUR_L_RESIZE"
			;;
	esac
	postlock
}

# $1: number of pixels to convert
# $2: 1 for width. 2 for height
logical_px() {
	# get dpi value from xdpyinfo
	local DPI=$(xdpyinfo | sed -En "s/\s*resolution:\s*([0-9]*)x([0-9]*)\s.*/\\$2/p" | head -n1)
	
	# return the default value if no DPI is set
	if [ -z "$DPI" ]; then
		echo $1
	else
		local SCALE=$(echo "scale=2; $DPI / 96.0" | bc)

		# check if scaling the value is worthy
		if [ $(echo "$SCALE > 1.25" | bc -l) -eq 0 ]; then
			echo $1
		else
			echo "$SCALE * $1 / 1" | bc
		fi
	fi
}

# get total resolution
get_total_size () {
	TOTAL_SIZE=$(xdpyinfo | grep -w "dimensions" | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')
}


get_display_list () {
	local count=0
	mapfile -t displays < <(xrandr --listactivemonitors)
	for display in "${displays[@]:1}"; do
		((count++))
		display="$(echo "$display" | sed -r 's/\/[0-9]*//g')"
		IFS=' ' read -r -a info  <<< "$display"
		DISPLAY_LIST+=("$count ${info[3]} ${info[2]}")
	done
}


get_user_wall() {
	local path="$1"
	if [ ! -d "$path" ]; then
		USER_WALL="$path"
		return
	fi
	dir=("$path"/*)
	rdir="${dir[RANDOM % ${#dir[@]}]}"
	get_user_wall "$rdir"
}

resize_and_render () {

	# arguments
	local base=$1
	local path=$2
	local resolution=$3

	# wallpaper
	RES_RESIZE="$path/resize.png"
	RES_DIM="$path/dim.png"
	RES_BLUR="$path/blur.png"
	RES_DIMBLUR="$path/dimblur.png"
	RES_PIXEL="$path/pixel.png"

	base_resize "$base" "$RES_RESIZE" "$resolution"
	for effect in "${fx_list[@]}"; do
		case $effect in
			dim)
				fx_dim "$RES_RESIZE" "$RES_DIM";;
			blur)
				fx_blur "$RES_RESIZE" "$RES_BLUR" "$resolution";;
			dimblur)
				fx_dimblur "$RES_RESIZE" "$RES_DIMBLUR" "$resolution";;
			pixel)
				fx_pixel "$RES_RESIZE" "$RES_PIXEL";;
		esac
	done

}

# apply resize
base_resize() {
	local input=$1
	local output=$2
	local size=$3

	echo "Resizing base image..."
	eval convert "$input" \
		-resize "$size""^" \
		-gravity center \
		-extent "$size" \
		"$output"
}

# apply dim
fx_dim() {
	local input=$1
	local output=$2

	echo "Rendering 'dim' effect..."
	eval convert "$input" \
		-fill black -colorize 40% \
		"$output"
}

# apply blur
fx_blur() {
	local input=$1
	local output=$2
	local size=$3

	echo "Rendering 'blur' effect..."
	blur_shrink=$(echo "scale=2; 20 / $blur_level" | bc)
	blur_sigma=$(echo "scale=2; 0.6 * $blur_level" | bc)
	eval convert "$input" \
		-filter Gaussian \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$size^" -gravity center -extent "$size" \
		"$output"
}

# apply dimblur
fx_dimblur() {
	local input=$1
	local output=$2
	local size=$3

	echo "Rendering 'dimblur' effect..."
	blur_shrink=$(echo "scale=2; 20 / $blur_level" | bc)
	blur_sigma=$(echo "scale=2; 0.6 * $blur_level" | bc)
	eval convert "$input" \
		-fill black -colorize 40% \
		-filter Gaussian \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$size^" -gravity center -extent "$size" \
		"$output"
}

# pixelate
fx_pixel() {
	local input=$1
	local output=$2

	echo "Rendering 'pixel' effect..."
	eval convert "$input" \
		-scale 10% -scale 1000% \
		"$output"
}

# create loginbox rectangle, set RECTANGLE
create_loginbox () {
	RECTANGLE="$CUR_DIR/rectangle.png"
	local shadow="$CUR_DIR/shadow.png"
	convert -size 300x80 xc:\#"$loginbox" -fill none $RECTANGLE
	convert $RECTANGLE \
		\( -clone 0 -background \#"$loginshadow" -shadow 100x5+0+0 \) +swap \
		-background none -layers merge +repage $shadow
	composite -compose Dst_Out -gravity center \
		$RECTANGLE $shadow -alpha Set $shadow
	convert $shadow $RECTANGLE -geometry +10+10 -composite $RECTANGLE
	[[ $shadow ]] && rm $shadow
}

# delete and recreate directory
purge_cache () {
	if [[ -d "$1" ]]; then
		rm -r "$1"
	fi
	mkdir -p "$1" 
}

# update locker and wallpaper images
update () {

	local image="$1"
	local rectangles=" "

	get_user_wall "$image" # USER_WALL
	echo "Original: $USER_WALL"

	get_display_list # DISPLAY_LIST
	get_total_size # TOTAL_SIZE

	for display in "${DISPLAY_LIST[@]}"; do

		IFS=' ' read -r -a dinfo  <<< "$display"
		local id="${dinfo[0]}"
		local device="${dinfo[1]}"
		local geometry="${dinfo[2]}"

		read -r -a cols <<< "${geometry//[x+-]/ }"
		local position="${geometry#*${cols[1]}}"
		local resolution="${geometry%${position}*}"

		if [[ $id -eq "$display_on" ]] || [[ "$display_on" -eq 0 ]]; then

			IFS='x' read -r -a dimension <<< "$resolution"
			#res_x="${dimension[0]}"
			res_y="${dimension[1]}"
			read -r -a val <<< "${position//[+-]/ }"
			read -r -a sym <<< "${position//[0-9]/ }"
			pos_x="${sym[0]}${val[0]}"
			pos_y="${sym[1]}${val[1]}"

			rect_x=$((pos_x + $(logical_px 15 1)))
			rect_y=$((pos_y + res_y - $(logical_px 120 2)))
			positions+="+$((rect_x))+$((rect_y)) "
		fi

		echo "Found: $device ($id)"
		echo "Resolution: $resolution"
		
		local path="$CACHE_DIR/$id-$device"
		purge_cache "$path"

		if [ "$span_image" = true ] && [ "$id" -gt 1 ]; then
			continue
		fi

		if [ "$span_image" = true ]; then
			resize_and_render "$USER_WALL" "$path" "$TOTAL_SIZE"
		else
			resize_and_render "$USER_WALL" "$path" "$resolution"

			PARAM_RESIZE="$PARAM_RESIZE $RES_RESIZE -geometry $position -composite "
			PARAM_DIM="$PARAM_DIM $RES_DIM -geometry $position -composite "
			PARAM_BLUR="$PARAM_BLUR $RES_BLUR -geometry $position -composite "
			PARAM_DIMBLUR="$PARAM_DIMBLUR $RES_DIMBLUR -geometry $position -composite "
			PARAM_PIXEL="$PARAM_PIXEL $RES_PIXEL -geometry $position -composite "
		fi
		
	done
	
	purge_cache "$CUR_DIR"

	if [ "$span_image" = true ] || [ ${#DISPLAY_LIST[@]} -lt 2 ]; then
		echo "Copying final wallpaper images..."
		[[ -f "$RES_RESIZE" ]] && cp $RES_RESIZE $CUR_W_RESIZE
		[[ -f "$RES_DIM" ]] && cp $RES_DIM $CUR_W_DIM
		[[ -f "$RES_BLUR" ]] && cp $RES_BLUR $CUR_W_BLUR
		[[ -f "$RES_DIMBLUR" ]] && cp $RES_DIMBLUR $CUR_W_DIMBLUR
		[[ -f "$RES_PIXEL" ]] && cp $RES_PIXEL $CUR_W_PIXEL
	else
		echo "Creating canvas: $TOTAL_SIZE"
		[[ -f "$RES_RESIZE" ]] && convert -size $TOTAL_SIZE 'xc:blue' $CUR_W_RESIZE
		[[ -f "$RES_DIM" ]] && convert -size $TOTAL_SIZE 'xc:blue' $CUR_W_DIM
		[[ -f "$RES_BLUR" ]] && convert -size $TOTAL_SIZE 'xc:blue' $CUR_W_BLUR
		[[ -f "$RES_DIMBLUR" ]] && convert -size $TOTAL_SIZE 'xc:blue' $CUR_W_DIMBLUR
		[[ -f "$RES_PIXEL" ]] && convert -size $TOTAL_SIZE 'xc:blue' $CUR_W_PIXEL

		echo Rendering final wallpaper images...
		[[ -f "$CUR_W_RESIZE" ]] && convert $CUR_W_RESIZE $PARAM_RESIZE $CUR_W_RESIZE
		[[ -f "$CUR_W_DIM" ]] && convert $CUR_W_DIM $PARAM_DIM $CUR_W_DIM
		[[ -f "$CUR_W_BLUR" ]] && convert $CUR_W_BLUR $PARAM_BLUR $CUR_W_BLUR
		[[ -f "$CUR_W_DIMBLUR" ]] && convert $CUR_W_DIMBLUR $PARAM_DIMBLUR $CUR_W_DIMBLUR
		[[ -f "$CUR_W_PIXEL" ]] && convert $CUR_W_PIXEL $PARAM_PIXEL $CUR_W_PIXEL
	fi

	echo "Rendering final locker images..."
	create_loginbox

	for pos in ${positions[@]}; do
		PARAM_RECT="$PARAM_RECT $RECTANGLE -geometry $pos -composite "
	done

	[[ -f "$CUR_W_RESIZE" ]] && convert $CUR_W_RESIZE $PARAM_RECT $CUR_L_RESIZE
	[[ -f "$CUR_W_DIM" ]] && convert $CUR_W_DIM $PARAM_RECT $CUR_L_DIM
	[[ -f "$CUR_W_BLUR" ]] && convert $CUR_W_BLUR $PARAM_RECT $CUR_L_BLUR
	[[ -f "$CUR_W_DIMBLUR" ]] && convert $CUR_W_DIMBLUR $PARAM_RECT $CUR_L_DIMBLUR
	[[ -f "$CUR_W_PIXEL" ]] && convert $CUR_W_PIXEL $PARAM_RECT $CUR_L_PIXEL

	[[ $RECTANGLE ]] && rm "$RECTANGLE"

}

wallpaper() {
	local fopt
	get_display_list
	if [ "$span_image" = true ] || [[ "${#DISPLAY_LIST[@]}" -gt 1 ]]; then
		fopt="--no-xinerama"
	fi
	case "$1" in
		'')
			# set resized image as wallpaper if no argument is supplied by user
			feh --bg-fill "$fopt" "$CUR_W_RESIZE"
			;;

		dim)
			# set dimmed image as wallpaper
			feh --bg-fill "$fopt" "$CUR_W_DIM"
			;;

		blur)
			# set blurred image as wallpaper
			feh --bg-fill "$fopt" "$CUR_W_BLUR"
			;;

		dimblur)
			# set dimmed + blurred image as wallpaper
			feh --bg-fill "$fopt" "$CUR_W_DIMBLUR"
			;;

		pixel)
			# set pixelated image as wallpaper
			feh --bg-fill "$fopt" "$CUR_W_PIXEL"
			;;
	esac
}


empty() {
	if [ -f $CUR_L_RESIZE ]; then
		echo -e "\nSeems you haven't provided any arguments. See below for usage details."
	else
		echo 'Important: Update the image cache (e.g. multilockscreen -u path/to/image.jpg).'
		echo
		echo '		Image cache must be updated to initially configure or update the wallpaper used.'
	fi

	echo
	echo 'For other sets of options and help, use the help command.'
	echo 'e.g. multilockscreen -h or multilockscreen --help'
	echo
	echo 'See: https://github.com/pavanjadhaw/betterlockscreen for additional info...'
	exit 1
}


usage() {
	echo 'Important: Update the image cache (e.g. multilockscreen -u path/to/image.jpg).'
	echo '	Image cache must be updated to initially configure or update wallpaper used'
	echo
	echo
	echo 'See: https://github.com/pavanjadhaw/betterlockscreen for additional info...'
	echo
	echo
	echo 'Options:'
	echo
	echo '	-h --help'
	echo '		For help (e.g. multilockscreen -h or multilockscreen --help).'
	echo
	echo
	echo '	-u --update'
	echo '		to update image cache, you should do this before using any other options'
	echo '		E.g: multilockscreen -u path/to/image.png when image.png is custom background'
	echo '		Or you can use multilockscreen -u path/to/imagedir and a random file will be selected.'
	echo
	echo
	echo '	-l --lock'
	echo '		to lock screen (e.g. multilockscreen -l)'
	echo '		you can also use dimmed or blurred background for lockscreen.'
	echo '		E.g: multilockscreen -l dim (for dimmed background)'
	echo '		E.g: multilockscreen -l blur (for blurred background)'
	echo '		E.g: multilockscreen -l dimblur (for dimmed + blurred background)'
	echo
	echo
	echo '	-s --suspend'
	echo '		to suspend system and lock screen (e.g. multilockscreen -s)'
	echo '		you can also use dimmed or blurred background for lockscreen.'
	echo '		E.g: multilockscreen -s dim (for dimmed background)'
	echo '		E.g: multilockscreen -s blur (for blurred background)'
	echo '		E.g: multilockscreen -s dimblur (for dimmed + blurred background)'
	echo
	echo
	echo '	-w --wall'
	echo '		you can also set lockscreen background as wallpaper'
	echo '		to set wallpaper (e.g. multilockscreen -w or multilockscreen --wall)'
	echo '		you can also use dimmed or blurred variants.'
	echo '		E.g: multilockscreen -w dim (for dimmed wallpaper)'
	echo '		E.g: multilockscreen -w blur (for blurred wallpaper)'
	echo '		E.g: multilockscreen -w dimblur (for dimmed + blurred wallpaper)'
	echo
	echo
	echo '	-d --display'
	echo '		to be used after -u'
	echo '		used to set which screen to display login box.'
	echo '		E.g: multilockscreen -u path/to/image.png -d 1'
	echo '		E.g: multilockscreen -u path/to/image.png --display 2'
	echo
	echo
	echo '	--span'
	echo '		to be used after -u'
	echo '		used to create wall and locker images that span multiple displays.'
	echo '		E.g: multilockscreen -u path/to/image.png --span'
	echo
	echo
	echo '	-b --blur'
	echo '		to be used after -u'
	echo '		used to set blur intensity. Default to 1.'
	echo '		E.g: multilockscreen -u path/to/image.png -b 3'
	echo '		E.g: multilockscreen -u path/to/image.png --blur 0.5'
	echo
	echo
	echo '	-t --text'
	echo '		to set custom lockscreen text (max 31 chars)'
	echo "		E.g: multilockscreen -l dim -t \"Don't touch my machine!\""
	echo '		E.g: multilockscreen --text "Hi, user!" -s blur'
	echo
	echo
	echo '	--off <timeout>'
	echo '		to set custom monitor turn off timeout for lockscreen'
	echo '		timeout is in seconds'
	echo '		E.g: multilockscreen -l dim --off 5'
}


# Options
[[ "$1" = '' ]] && empty

for arg in "$@"; do
	[[ "${arg:0:1}" = '-' ]] || continue

	case "$1" in
		-h | --help)
			usage
			break
			;;

		-s | --suspend)
			runsuspend=true
			;&

		-l | --lock)
			runlock=true
			[[ $runsuspend ]] || lockargs="$lockargs -n"
			[[ ${2:0:1} = '-' ]] && shift 1 || { lockstyle="$2"; shift 2; }
			;;

		-w | --wall | --wallpaper)
			wallpaper "$2"
			shift 2
			;;

		-u | --update)
			runupdate=true
			imagepath="$2"
			shift 2
			;;

		-t | --text)
			locktext="$2"
			shift 2
			;;

		--off)
			lock_timeout="$2"
			shift 2
			;;

		-d | --display)
			display_on="$2"
			shift 2
			;;

		--span)
			span_image=true
			shift 1
			;;

		-b | --blur)
			blur_level="$2"
			shift 2
			;;

		--)
			lockargs="$lockargs ${@:2}"
			break
			;;

		*)
			echo "invalid argument: $1"
			break
			;;
	esac
done

# Run image generation
[[ $runupdate ]] && update "$imagepath"

# Activate lockscreen
[[ $runlock ]] && lockselect "$lockstyle" && \
	{ [[ $runsuspend ]] && systemctl suspend; }

exit 0
